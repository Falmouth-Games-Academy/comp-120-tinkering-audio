import random

frq = 12500
amp = 10
chan = 1
hz = 22050
numsamples = 10
S = sineWave(600, 2000, 5)
D = sineWave(440, 2000, 5)
  
def sineWave(freq, amplitude, length): 
  # Create a blank sound 
  buildSin = makeEmptySoundBySeconds(length)
  # Set constants 
  samplingRate = getSamplingRate(buildSin) 
  interval = 1.0 / freq 
  samplesPerCycle = interval * samplingRate 
  maxCycle = 2 * pi 
  # Generate the sound 
  for pos in range(getLength(buildSin)): 
    rawSample = sin((pos / samplesPerCycle) * maxCycle) 
    sampleVal = int(amplitude * rawSample) 
    setSampleValueAt(buildSin, pos, sampleVal) 
  return buildSin
  
def mergeSine(sound1, sound2):
  for sample in range(0,getLength(sound1)): 
    sample1 = getSampleValueAt(sound1, sample)
    sample2 = getSampleValueAt(sound2, sample)
    setSampleValueAt(sound1, sample, sample1 + sample2)
  return sound1
  
def normalize(norm):
  largest = 0
  for s in getSamples(norm):
    largest = max(laegest, getSampleValue(s))
  amplification = 32767.0 / largest
  return norm
  
def max(sound):
  for sample in getSamples(sound):
    value = getSampleValue(sample)
    if value > 0:
      setSampleValue(sample, 32767)
    if value < 0:
      setSampleValue(sample, -32768)
      
def splice(song):
  for source in range(0, getLength(song)):
    value = getSampleValueAt(song, source)
    setSampleValueAt(target, index, value)
    index = index + 1
     
def merge():
  target = makeSound(getMediaPath("sec3silence.wav"))
  index = 0
  splice("")
  for source in range(0, int(0.1*getSamplingRate(target))):
    setSampleValueAt(target, index, 0)
    index = index + 1
  splice("")
  normalize(target)
  play(target)
  return target
  
def reverse(source):
  target = makeEmptySound(getLength(source))
  sourceIndex = getLength(source) - 1 # start at end
  for targetIndex in range(0, getLength(target)):
     = getSampleValueAt(source, sourceIndex)
    setSampleValueAt(target, targetIndex, value)
    sourceIndex = sourceIndex - 1 # move backwards
  return target
  
def splicearcher():
  file = r"C:\Users\james\Documents\Uni\COMP 120 Tinkering Graphics\ArcherPissed8.wav"
  source = makeSound(file)
  target = makeSound(file) # This will be the newly spliced sound
  targetIndex = 17408 # targetIndex starts at just after "We the" in the new sound
  for sourceIndex in range( 33414, 40052): # Where the word "United" is in the sound
    setSampleValueAt(target, targetIndex, getSampleValueAt(source, sourceIndex))
    targetIndex = targetIndex + 1
  for sourceIndex in range(17408, 26726): # Where the word "People" is in the sound
    setSampleValueAt(target , targetIndex, getSampleValueAt(source, sourceIndex))
    targetIndex = targetIndex + 1
  for index in range(0, 1000): #Stick some quiet space after that
    setSampleValueAt(target, targetIndex, 0)
    targetIndex = targetIndex + 1
  play(target) #Let's hear and return the result
  return target
  
def echo(delay):
  sndFile = r"C:\Users\james\Documents\Uni\COMP 120 Tinkering Graphics\HeroDemonHunterPissed7.wav"
  s1 = makeSound(sndFile)
  s2 = makeSound(sndFile)
  for index in range(delay, getLength(s1)):
    echo = 0.6*getSampleValueAt(s2, index-delay)
    combo = getSampleValueAt(s1, index) + echo
    setSampleValueAt(s1, index, combo)
  play(s1)
  return s1
  
def echod(delay):
  sndFile = r"C:\Users\james\Documents\Uni\COMP 120 Tinkering Graphics\ArcherPissed8.wav"
  s = makeSound(sndFile)
  for index in range(delay, getLength(s)):
    echo = 0.6*getSampleValueAt(s, index-delay)
    combo = getSampleValueAt(s, index) + echo
    setSampleValueAt(s, index, combo)
  play(s)
  return s
  
def makeNoise(amplitude, length):
  # Create a blank sound 
  buildNoise = makeEmptySoundBySeconds(length) 
  # Make some noise! 
  for pos in range(getLength(buildNoise)): 
    rawSample = random.uniform(-1, 1) 
    sampleVal = int(amplitude * rawSample) 
    setSampleValueAt(buildNoise, pos, sampleVal) 
  return buildNoise